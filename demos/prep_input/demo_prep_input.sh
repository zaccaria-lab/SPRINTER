# Demo on preparing input data for SPRINTER
: ex: set ft=markdown ;:<<'```shell' #

The following SPRINTER demo represents a guided example of a possible pipeline to generate the required input for SPRINTER starting from a barcoded single-cell BAM file.
This demo uses an exemplary barcoded [BAM file](https://doi.org/10.5281/zenodo.3950299) publicly available.
From this directory, simply run this file through BASH as a standard script to run the complete demo.
The demo can also be considered as a guided example to be executed line-by-line.
Any other pipeline that generates input data similar to [], as required by SPRINTER, can be a valid alternative to this pipeline.

## Requirements and set up

The demo requires the CHISEL algorithm, and it requires CHISEL to be installed into its own independent environment (it cannot be the same SPRINTER environment), preferably through [conda]().
Specifically, please make sure that you can run the command `chisel_rdr` in an environment activated before running this demo.
The demo includes the downloading of all the required files and will terminate in <20 minutes on machine with minimum requirements satisfied.

We gurantee that the running directory in the same directory of the demo and we remove previous results.

```shell
cd $( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )
:<<'```shell' # Ignore this line
```

We also ask the demo to terminate in case of errors and to print a trace of the execution by the following commands
```shell
set -e
set -o xtrace
PS4='[\t]'
:<<'```shell' # Ignore this line
```

## Downloading of data

The demo auomatically downloads the required barcoded single-cell and matched-normal BAM files in `data` folder.

```shell
# Creating data folder
mkdir -p data

# Downloading tumor barcoded BAM file
echo "Downloading tumor barcoded BAM file from Zenodo, please be patient as downloading time may vary."
curl -L 'https://zenodo.org/record/3950299/files/cells.bam?download=1' > data/cells.bam
curl -L 'https://zenodo.org/record/3950299/files/cells.bam.bai?download=1' > data/cells.bam.bai
export TUM="data/cells.bam"
:<<'```shell' # Ignore this line
```

Next the corresponding reference genome is downloaded, unpacked, and indexed.

```shell
echo "Downloading human reference genome, please be patient as downloading time may vary."
curl -L https://hgdownload.cse.ucsc.edu/goldenpath/hg19/bigZips/analysisSet/hg19.p13.plusMT.full_analysis_set.fa.gz | gzip -d > data/hg19.fa
samtools faidx data/hg19.fa
samtools dict data/hg19.fa > data/hg19.dict
curl -L https://hgdownload.cse.ucsc.edu/goldenpath/hg19/bigZips/analysisSet/hg19.p13.plusMT.no_alt_analysis_set.bwa_index.tar.gz | tar xvz --strip-components 1 -C data/
for F in data/hg19.p13.plusMT.no_alt_analysis_set*; do BASE=$(basename ${F}); mv ${F} data/hg19.fa.${BASE##*.}; done
export REF="data/hg19.fa"
:<<'```shell' # Ignore this line
```

## Generating SPRINTER input

SPRINTER input only corresponds to a TSV dataframe including read counts for 50kb genomic bins for every cell and a read count from a control source.
This inout can be generated by the command `chisel_rdr` of CHISEL from the barcoded BAM file in ${TUM} and it does **not** require a matched normal sample as this will be simulated by CHISEL.
Note that `chisel_rdr` assumes by default that the barcodes of each cell in the barcoded single-cell BAM file contains `CB:Z:` as a substring, as generated by the `chisel_prep` command and other standard pipelines.
If this is not the case, please change it using the flag `--cellprefix`, for example with `--cellprefix RG:Z:` in case only the read group field `RG` is used to distinguish different barcodes.
Also, by default we will select only cells with at least 100k reads using the flag `-m 100000`; please change it accordingly if needed.
Finally, please make sure to add the option `-j J` with J being the number of available cores, set to 8 as an example here but it should be increased to the maximum number of available processors for efficiency purposes.

```shell
chisel_rdr -t ${TUM} \
           -r ${REF} \
           -b 50000 \
           -m 100000 \
           -j 8
:<<'```shell' # Ignore this line
```

Finally, we compress the output file to obtain the SPRINTER input file `sprinter.input.tsv.gz` and remove any other temporary folder created in the process.

```shell
gzip -c rdr/rdr.tsv > sprinter.input.tsv.gz
rm -rf rdr/ baf/ combo/ calls/ clones/ plots/
echo "END"
exit $?
```

Note that this is just a toy example, i.e., an exemplary input file, which is just meant to be used for testing purposes as it only includes sequencing read counts from chromosome 6, while SPRINTER requires whole-genome sequencing data across all automsomes.
However, the same process can be applied to a real whole-genome, single-cell barcoded BAM file to obtain an accurate input for SPRINTER.

